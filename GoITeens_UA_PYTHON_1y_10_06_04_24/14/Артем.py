#prime_numbers = {2, 3, 5, 7, 11, 13, 17, 19, 23}

#if 3 in prime_numbers:
#    print("Число 3 є в списку")
#else:
#    print("Число 3 немає в списку")


# Створити словник із наступними ключами (дивись нижче).
# Зробити перевірку чи є елемент 'age' серед ключів словника та вивести інформацію, яка подана в Результаті.

#user = {
#   "name": "Bill",
#    "surname": "Bosh",
#    "age": 22
#}
#if "age" in user:
#   print(f"В списку є вік: {user["age"]} ")
#else:
#    print(f"В списку немає віку")



# Задано словник, що містить відстані від Києва до обласних центрів. Знайти обласний центр, найбільш віддалений від Києва.
#cities = {
  #  'Київ'    : 0,
   # 'Вінниця' : 240,
   # 'Харків'  : 470,
  #  'Ужгород' : 808,
 #   'Львів'   : 540,
#    'Житомир' : 120,
 #   'Одеса'   : 430
#max_dist = 0
#city_name = ""

#for city, dist in cities.items():
 #   if dist > max_dist:
#        city_name = city
 #       max_dist = dist
#print(f"Найбільш віддалений від Києва місто це: {city_name}")


# Дано список міст, в яких працює Укрпошта та Нова Пошта.
# Користувач вводить місто з клавіатури.
# Запропонувати користувачеві доставку поштовим оператором або вивести повідомлення про неможливість доставки.
# post_ukr = {'Київ', 'Фастів', 'Ірпінь', 'Боярка'}
# post_new = {'Київ', 'Фастів', 'Кагарлик', 'Узин', 'Ірпінь', 'Гатне', 'Боярка', 'Гостомель'}
# user_city_min_lenth = 3

# deliver = input("Введіть назву міста в яку хочете доставити посилку: ")
# if deliver in post_new and deliver in post_ukr:
#     print("Ви зможете доставити і забрати посилку в Нову пошту і Укрпошту")
# elif deliver in post_new:
#     print("Ви зможете забрати і доставити посилку тільки в Нову пошту")
# elif deliver in post_ukr:
#     print("Ви зможете забрати і доставити пошту тільки в Укрпошту")




# Задано список туристичних ваучерів, в яких зазначено готель,
# прізвище власника, кількість подорожуючих.
# Підрахувати, скільки туристів їдуть в кожен з готелів.
# clients = [
#     ['White House', 'Іванов', 3],
#     ['Shelter', 'Іванова', 5],
#     ['Верховина', 'Іванова', 5],
#     ['Верховина', 'Бронювальник', 8],
#     ['Буковель', 'Іванова', 5]
# ]


# Напишіть програму, яка приймає список чисел та повертає новий список,
# що містить лише унікальні елементи вхідного.

# numbers = [1, 5, 9, 1, 5, 7, 4, 5]


# Напишіть програму, яка приймає словник, та змінює всі значення на їх квадрати.

# numbers = {
#     "one": 1,
#     "two": 2,
#     "three": 3
# }
# for val in numbers.values():
#     val ** 


# Створіть програму, яка приймає список рядків та повертає список унікальних слів,
# які зустрічаються в цих рядках.

#strings = ["Створіть програму, яка приймає список", "зустрічаються в цих рядках", "список", "# Створіть програму, яка приймає список рядків та повертає список унікальних слів, \n# які зустрічаються в цих рядках."]

#special_words = set()
#for string in strings:
#    special_words.add(string)
#print(f"list{special_words}")



# Напишіть програму, яка приймає список рядків та повертає список,
# в якому кожен елемент — це рядок, який містить першу літеру кожного слова в вхідному рядку.

# strings = ["Створіть програму, яка приймає список", "зустрічаються в цих рядках", "список", "# Створіть програму, яка приймає список рядків та повертає список унікальних слів, \n# які зустрічаються в цих рядках."]


# first_letter = []

# for str in strings:
#     for word in str.split():
#         first_letter.append(word[0])
# print(f"Перші літери в списку: {first_letter}")


# Створіть програму, яка приймає список та повертає рядок,
# який містить всі елементи вхідного списку, розділені комами.

# numbers = list(range(100))


# Напишіть програму, яка приймає два словника та повертає словник,
# що містить ключі та значення обох вхідних словників.

#dict_1 = {
#    "one": 1,
#    "two": 2
#}
#dict_2 = {
#    "three": 3
#}

#dict_1.update(dict_2)
#print(dict_1)



# Створіть програму, яка приймає список та повертає список,
# який містить тільк
# 
# 
# хідного списку.

# numbers = list(range(1, 51))
# even_numbers = []
# not_even_numbers = []
# for number in numbers:
#   if number % 2:
#     not_even_numbers.append(number)
#   else:
#     even_numbers.append(number)
# print(not_even_numbers)



# Напишіть програму, яка приймає два списки та повертає список,
# який містить елементи, які зустрічаються у обох вхідних списках.

numbers_1 = list(range(-50,0))
numbers_2 = list(range(0, 51))
