# Зробити перевірку того, чи є число 3 в множині перших дев'яти простих чисел prime_numbers:
prime_numbers = {2, 3, 5, 7, 11, 13, 17, 19, 23}






# Створити словник із наступними ключами (дивись нижче).
# Зробити перевірку чи є елемент 'age' серед ключів словника та вивести інформацію, яка подана в Результаті.

user = {
    "name": "Bill",
    "surname": "Bosh",
    "age": 22
}






# Задано словник, що містить відстані від Києва до обласних центрів. Знайти обласний центр, найбільш віддалений від Києва.
cities = {
    'Київ'    : 0,
    'Вінниця' : 240,
    'Харків'  : 470,
    'Ужгород' : 808,
    'Львів'   : 540,
    'Житомир' : 120,
    'Одеса'   : 430
}

# city = max(cities, key=cities.get)
# print(city)





# Дано список міст, в яких працює Укрпошта та Нова Пошта.
# Користувач вводить місто з клавіатури.
# Запропонувати користувачеві доставку поштовим оператором або вивести повідомлення про неможливість доставки.
# post_ukr = {'Київ', 'Фастів', 'Ірпінь', 'Боярка'}
# post_new = {'Київ', 'Фастів', 'Кагарлик', 'Узин', 'Ірпінь', 'Гатне', 'Боярка', 'Гостомель'}
# user_city_min_lenth = 3

# city_name = input("Введіть не менше 3 символів назви міста: ")

# for city in post_ukr:
#     if city_name in city:
#         print("Доставка можлива Укрпоштою")
#         break

# for city in post_new:
#     if city_name in city:
#         print("Доставка можлива Новою Поштою")
#         break






# Задано список туристичних ваучерів, в яких зазначено готель,
# прізвище власника, кількість подорожуючих.
# Підрахувати, скільки туристів їдуть в кожен з готелів.
# clients = [
#     ['White House', 'Іванов', 3],
#     ['Shelter', 'Іванова', 5],
#     ['Верховина', 'Іванова', 5],
#     ['Веровинах', 'Бронювальник', 8],
#     ['Буковель', 'Іванова', 5]
# ]

# otels = {}
# for client in clients:
#     otels[client[0]] = otels.get(client[0], 0) + client[-1]
#     input(otels)




# Напишіть програму, яка приймає список чисел та повертає новий список,
# що містить лише унікальні елементи вхідного.

# numbers = [1, 5, 9, 1, 5, 7, 4, 5]

# print(set(numbers))
# set()
# list()
# dict()
# str()
# tuple()




# Напишіть програму, яка приймає словник, та змінює всі значення на їх квадрати.

# numbers = {
#     "one": 1,
#     "two": 2,
#     "three": 3
# }

# for key in numbers:
#     numbers[key] = numbers[key] ** 2

# print(numbers)








# Створіть програму, яка приймає список рядків та повертає список унікальних слів,
# які зустрічаються в цих рядках.

# strings = ["Створіть програму, яка приймає список", "зустрічаються в цих рядках", "список", "# Створіть програму, яка приймає список рядків та повертає список унікальних слів, \n# які зустрічаються в цих рядках."]

# unique_words = set()

# for string in strings:
#     for word in string.replace(",", "").replace("#", "").replace("\n", "").split():
#         unique_words.add(word)

# print(list(unique_words))










# Напишіть програму, яка приймає список рядків та повертає список,
# в якому кожен елемент — це рядок, який містить першу літеру кожного слова в вхідному рядку.

# strings = ["Створіть програму, яка приймає список", "зустрічаються в цих рядках", "список", "# Створіть програму, яка приймає список рядків та повертає список унікальних слів, \n# які зустрічаються в цих рядках."]

# first_letter = []

# for string in strings:
#     for word in string.split():
#         first_letter.append(word[0])
# print(f"Перші літери рядків у списку - {first_letter}")

# string = " ".join(strings)
# print(f"{string = }")
# first_letters = [word[0] for word in string.replace("#", "").split()]
# print(f"{first_letters = }")


# Створіть програму, яка приймає список та повертає рядок,
# який містить всі елементи вхідного списку, розділені комами.

# numbers = list(range(100))
# numbers = [str(number) for number in numbers]
# print(numbers)

# numbers = ",".join(numbers)

# numbers = str(numbers).strip("[]")
# print(type(numbers))
# print(numbers)




# Напишіть програму, яка приймає два словника та повертає словник,
# що містить ключі та значення обох вхідних словників.

dict_1 = {
    "one": 1,
    "two": 2
}

dict_2 = {
    "tree": 3
}







# Створіть програму, яка приймає список та повертає список,
# який містить тільки непарні елементи вхідного списку.









# Напишіть програму, яка приймає два списки та повертає список,
# який містить елементи, які зустрічаються у обох вхідних списках.










# Створіть програму, яка приймає список та повертає словник,
# де ключі — це елементи списку, а значення — це кількість входжень цих елементів в список.









# Напишіть програму, яка приймає список чисел та повертає список,
# в якому кожен елемент — це кількість входжень цього числа в вхідному списку.








# Створіть програму, яка приймає список та повертає новий список,
# в якому всі елементи вхідного списку випадковим чином перетасовані.









# Напишіть програму, яка приймає словник та повертає список ключів,
# значення яких є максимальними у словнику.








# Створіть програму, яка приймає список та повертає новий список,
# в якому всі елементи вхідного списку упорядковані в зворотному порядку.







# Напишіть функцію, яка приймає два списки та повертає True,
# якщо обидва списки містять однакові елементи, незалежно від їх порядку.










# Створіть програму, яка приймає список та повертає новий список,
# в якому кожен елемент — це сума попередніх елементів вхідного списку
# (тобто, перший елемент нового списку — це перший елемент вхідного списку,
# другий елемент нового списку — це сума першого та другого елементів вхідного списку і т.д.).