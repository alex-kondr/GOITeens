# Зробити перевірку того, чи є число 3 в множині перших дев'яти простих чисел prime_numbers:
# prime_numbers = {2, 3, 5, 7, 11, 13, 17, 19, 23}






# Створити словник із наступними ключами (дивись нижче).
# Зробити перевірку чи є елемент 'age' серед ключів словника та вивести інформацію, яка подана в Результаті.

# user = {
#     "name": "Bill",
#     "surname": "Bosh",
#     "age": 22
# }








# Задано словник, що містить відстані від Києва до обласних центрів. Знайти обласний центр, найбільш віддалений від Києва.
# cities = {
#     'Київ'    : 0,
#     'Вінниця' : 240,
#     'Харків'  : 470,
#     'Ужгород' : 808,
#     'Львів'   : 540,
#     'Житомир' : 120,
#     'Одеса'   : 430
# }











# Дано список міст, в яких працює Укрпошта та Нова Пошта.
# Користувач вводить місто з клавіатури.
# Запропонувати користувачеві доставку поштовим оператором або вивести повідомлення про неможливість доставки.
# post_ukr = {'Київ', 'Фастів', 'Ірпінь', 'Боярка'}
# post_new = {'Київ', 'Фастів', 'Кагарлик', 'Узин', 'Ірпінь', 'Гатне', 'Боярка', 'Гостомель'}
# user_city_min_lenth = 3













# Задано список туристичних ваучерів, в яких зазначено готель,
# прізвище власника, кількість подорожуючих.
# Підрахувати, скільки туристів їдуть в кожен з готелів.
# clients = [
#     ['White House', 'Іванов', 3],
#     ['Shelter', 'Іванова', 5],
#     ['Верховина', 'Іванова', 5],
#     ['Веровинах', 'Бронювальник', 8],
#     ['Буковель', 'Іванова', 5]
# ]







# Напишіть програму, яка приймає список чисел та повертає новий список,
# що містить лише унікальні елементи вхідного.

# numbers = [1, 5, 9, 1, 5, 7, 4, 5]









# Напишіть програму, яка приймає словник, та змінює всі значення на їх квадрати.

# numbers = {
#     "one": 1,
#     "two": 2,
#     "three": 3
# }











# Створіть програму, яка приймає список рядків та повертає список унікальних слів,
# які зустрічаються в цих рядках.

# strings = ["Створіть програму, яка приймає список", "зустрічаються в цих рядках", "список", "# Створіть програму, яка приймає список рядків та повертає список унікальних слів, \n# які зустрічаються в цих рядках."]












# Напишіть програму, яка приймає список рядків та повертає список,
# в якому кожен елемент — це рядок, який містить першу літеру кожного слова в вхідному рядку.

# strings = ["Створіть програму, яка приймає список", "зустрічаються в цих рядках", "список", "# Створіть програму, яка приймає список рядків та повертає список унікальних слів, \n# які зустрічаються в цих рядках."]












# Створіть програму, яка приймає список та повертає рядок,
# який містить всі елементи вхідного списку, розділені комами.

# numbers = list(range(100))





# Напишіть програму, яка приймає два словника та повертає словник,
# що містить ключі та значення обох вхідних словників.

# dict_1 = {
#     "one": 1,
#     "two": 2
# }

# dict_2 = {
#     "tree": 3
# }







# Створіть програму, яка приймає список та повертає список,
# який містить тільки непарні елементи вхідного списку.

# numbers = list(range(1, 51))







# Напишіть програму, яка приймає два списки та повертає список,
# який містить елементи, які зустрічаються у обох вхідних списках.

# numbers_1 = list(range(-50,0))
# numbers_2 = list(range(0, 51))






# Створіть програму, яка приймає список та повертає словник,
# де ключі — це елементи списку, а значення — це кількість входжень цих елементів в список.









# Напишіть програму, яка приймає список чисел та повертає список,
# в якому кожен елемент — це кількість входжень цього числа в вхідному списку.








# Створіть програму, яка приймає список та повертає новий список,
# в якому всі елементи вхідного списку випадковим чином перетасовані.









# Напишіть програму, яка приймає словник та повертає список ключів,
# значення яких є максимальними у словнику.








# Створіть програму, яка приймає список та повертає новий список,
# в якому всі елементи вхідного списку упорядковані в зворотному порядку.







# Напишіть функцію, яка приймає два списки та повертає True,
# якщо обидва списки містять однакові елементи, незалежно від їх порядку.










# Створіть програму, яка приймає список та повертає новий список,
# в якому кожен елемент — це сума попередніх елементів вхідного списку
# (тобто, перший елемент нового списку — це перший елемент вхідного списку,
# другий елемент нового списку — це сума першого та другого елементів вхідного списку і т.д.).