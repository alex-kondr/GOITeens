# prime_numbers = {2, 3, 5, 7, 11, 13, 17, 19, 23}                                      

# if 3 in prime_numbers:
#     print(f"цифра 3 есть в списке")

# else:
#     print(f"такоi цифри немаэ в списку")


# Створити словник із наступними ключами (дивись нижче).
# Зробити перевірку чи є елемент 'age' серед ключів словника та вивести інформацію, яка подана в Результаті.

# user = {
#     "name": "Bill",
#     "surname": "Bosh",
#     "age": 22
# }

# if "age" in user:
#     print(f"ему лет {"age"}")
# else:
#     print(f"такого немаэ")

# Задано словник, що містить відстані від Києва до обласних центрів. Знайти обласний центр, найбільш віддалений від Києва.
# cities = {
#     'Київ'    : 0,
#     'Вінниця' : 240,
#     'Харків'  : 470,
#     'Ужгород' : 1488,
#     'Львів'   : 540,
#     'Житомир' : 120,
#     'Одеса'   : 430


# big_city = 0 
# for city,len in cities.items():
#     if big_city < len:
#         big_city = len
# print(f"найбiльше мисто од киева { cities} ")
# print(f" на ростояние {big_city}")


# Дано список міст, в яких працює Укрпошта та Нова Пошта.
# Користувач вводить місто з клавіатури.
# Запропонувати користувачеві доставку поштовим оператором або вивести повідомлення про неможливість доставки.
# post_ukr = {'Київ', 'Фастів', 'Ірпінь', 'Боярка'}
# post_new = {'Київ', 'Фастів', 'Кагарлик', 'Узин', 'Ірпінь', 'Гатне', 'Боярка', 'Гостомель'}
# user_city_min_lenth = 3



# delivery = input(f"введить назву миста")
# if delivery in post_ukr and delivery in  post_new:
#     print(f"Ви сожете забрать посилку и там и там  :)")
# elif
#     delivery in post_ukr
#     print(f"виможете забрать посилку в укр поште ")
# elif
#     delivery in post_new
#     print(f"виможете забрать посилку в новой поште ")
# else:
#     breakpoint



# Задано список туристичних ваучерів, в яких зазначено готель,
# прізвище власника, кількість подорожуючих.
# Підрахувати, скільки туристів їдуть в кожен з готелів.
# clients = [
#     ['White House', 'Іванов', 3],
#     ['Shelter', 'Іванова', 5],
#     ['Верховина', 'Іванова', 5],
#     ['Буковель', 'Іванова', 5]
# ]

# for clients in clients:
    





# Напишіть програму, яка приймає список чисел та повертає новий список,
# що містить лише унікальні елементи вхідного.

# numbers = [1, 5, 9, 1, 5, 7, 4, 5]
# unique_numbers =set[]:
# for char in numbers:
#     unique_numbers.add(char)
# input("уникальние номера {unique_numbers}")



# Напишіть програму, яка приймає словник, та змінює всі значення на їх квадрати.

# numbers = {
#     "one": 1,
#     "two": 2,
#     "three": 3
# }

# for val in numbers.values():
#     numbers.values
#     numbers.update["one": 4,]
# print(numbers)



# Створіть програму, яка приймає список рядків та повертає список унікальних слів,
# які зустрічаються в цих рядках.

# strings = ["Створіть програму, яка приймає список", "зустрічаються в цих рядках", "список", "# Створіть програму, яка приймає список рядків та повертає список унікальних слів, \n# які зустрічаються в цих рядках."]

# unique_strings = set()
# for strings in strings:
#     unique_strings.add(strings)
#     input("уникальний рядок {unique_strings}")



# Напишіть програму, яка приймає список рядків та повертає список,
# в якому кожен елемент — це рядок, який містить першу літеру кожного слова в вхідному рядку.

# Напишіть програму, яка приймає список рядків та повертає список,
# в якому кожен елемент — це рядок, який містить першу літеру кожного слова в вхідному рядку.

# strings = ["Створіть програму, яка приймає список", "зустрічаються в цих рядках", "список", "# Створіть програму, яка приймає список рядків та повертає список унікальних слів, \n# які зустрічаються в цих рядках."]
# first_letter = []
# for string in strings:
#     for word in string.split():
#             first_letter.append(word[0])
# print(first_letter)



# Створіть програму, яка приймає список та повертає рядок,
# який містить всі елементи вхідного списку, розділені комами.

# numbers = list(range(100))


# Напишіть програму, яка приймає два словника та повертає словник,
# що містить ключі та значення обох вхідних словників.

# dict_1 = {
#     "one": 1,
#     "two": 2
# }

# dict_2 = {
#     "tree": 3
# }

# Створіть програму, яка приймає список та повертає список,
# який містить тільки непарні елементи вхідного списку.



# numbers = list(range(1, 51))

# even_numbers = []
# not_even_numbers = []
# for numbers in numbers:
#     if    numbers % 2 == 0:
#         even_numbers.append(numbers)
#     else:
#         not_even_numbers.append(numbers)
# print(not_even_numbers)








# Напишіть програму, яка приймає два списки та повертає список,
# який містить елементи, які зустрічаються у обох вхідних списках.

numbers_1 = list(range(-50,0))
numbers_2 = list(range(0, 51))

numbers =numbers_1 + numbers_2
print(numbers)














































