import string
import random
from datetime import datetime
from pprint import pprint


PRODUCTS = [
    "–ì—Ä–µ—á–∫–∞",
    "–ª–µ–æ–Ω—ñ–¥",
    "–¶—É–∫–æ—Ä—ñ–π",
    "–ú–∞–∫–∞—Ä–æ–Ω–∏",
    "–ô–æ–≥—É—Ä—Ç",
    "–°–ø–∞–≥–µ—Ç—ñ",
    "–ö–∞—Ä—Ç–æ–ø–ª—è",
    "–ë—É—Ä—è–∫",
    "–ú–æ—Ä–∫–≤–∞",
    "–õ–æ–∫—à–∏–Ω–∞",
    "–î–º–∏—Ç—Ä–æ",
    "–ê–π–∑–µ–Ω",
    "–ü–µ—Ç—É—Ö",
    "—Ä–æ—Å—ñ–π—Å—å–∫–µ –Ω–µ–º–æ–≤–ª—è",
    "–ö–∞–ø—É—Å—Ç–∞",
    "–ö–∞–ø—É—Å—Ç–∞",
    "–î–æ–Ω–¥–æ–Ω",
    "–¶–∏–±—É–ª—è",
    "–ß–∞—Å–Ω–∏–∫",
    "–ë–æ—Ä–æ—à–Ω–æ",
    "–Ø–π—Ü—è",
    "–ë—É–ª—å–±–∞",
    "–°–æ–Ω—è—à–Ω–∏–∫–æ–≤–∞ –æ–ª—ñ—è",
    "–í–µ—Ä—à–∫–æ–≤–µ –º–∞—Å–ª–æ",
    "–°—ñ–ª—å",
    "–î–æ–¥–æ–¥",
    "–ü–µ—Ä–µ—Ü—å",
    "–¶—É–∫–æ—Ä",
    "–û—Ü–µ—Ç",
    "–°–æ–¥–∞",
    "–ß–∞–π",
    "–ö–∞–≤–∞",
    "–û–∫–æ",
    "–ó–∞—Ä–∞–∑"
]
PRODUCTS_SOLD = []

###########################
HELP = """
"show all prods": "–ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –Ω–∞—è–≤–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤",
"add prod": "–î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π —Ç–æ–≤–∞—Ä –¥–æ —Å–ø–∏—Å–∫—É",
"add prods": "–î–æ–¥–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤",
"del prod by name": "–í–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä –∑–∞ —ñ–º'—è–º",
"del prod by numb": "–í–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä –∑–∞ –Ω–æ–º–µ—Ä",
"show sorted prods": "–ü–æ–∫–∞–∑–∞—Ç–∏ –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏–π —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤ –∑–∞ —ñ–º'—è–º",
"sold prod": "–ü—Ä–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä",
"find numb prod by name": "–ó–Ω–∞–π—Ç–∏ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä—É –∑–∞ —ñ–º'—è–º",
"show sold prods": "–ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥–∞–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤",
"show sales history": "–ü–æ–∫–∞–∑–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –ø—Ä–æ–¥–∞–∂—ñ–≤",
"exit": "–í–∏–π—Ç–∏ –∑ –ø—Ä–æ–≥—Ä–∞–º–∏",
"add review": "–ù–∞–ø–∏—Å–∞—Ç–∏ –≤—ñ–¥–≥—É–∫",
"find repeated chars": "–ó–Ω–∞–π—Ç–∏ –≥—Ä—É–ø–∏ —Å–∏–º–≤–æ–ª—ñ–≤, —è–∫—ñ –ø–æ–≤—Ç–æ—Ä—é—é—Ç—å—Å—è (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –≤—Å—ñ –≤—ñ–¥–≥—É–∫–∏)",
"find palidrome": "–ó–Ω–∞–π—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∏, —è–∫—ñ —î –ø–∞–ª—ñ–Ω–¥—Ä–æ–º–∞–º–∏",
"add employee": "–î–æ–¥–∞—Ç–∏ –Ω–æ–≤–æ–≥–æ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞",
"del employee": "–í–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞",
"show employees": "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤",
"change salary": "–ó–º—ñ–Ω–∏—Ç–∏ –∑–∞—Ä–æ–±—ñ—Ç–Ω—É –ø–ª–∞—Ç—É –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞",
"change position": "–ó–º—ñ–Ω–∏—Ç–∏ –ø–æ—Å–∞–¥—É –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞",
"show log": "–ü–æ–∫–∞–∑–∞—Ç–∏ –ª–æ–≥",
"show most using commands": "–ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ —Ç–∞ —ó—Ö —á–∞—Å—Ç–æ—Ç—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è"
"""

PASSWORD = ""
REVIEWS = [
    "–î—É–∂–µ –≥–∞—Ä–Ω–∏–π —Ç–æ–≤–∞—Ä",
    "–ü–†–û–î–£–ö–¢–ò –ù–ï –î–£–ñ–ï",
    "–¥—É–∂–µ –ø–æ–≥–∞–Ω–µ —Å—Ç–∞–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤",
    "–Ø–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤ –ø—Ä–æ—Å—Ç–æ —Å—É–ø–µ—Ä",
    "–î—É–∂–µ –ø–æ–≥–∞–Ω–∞ —è–∫",
    "–í–µ–ª–∏–∫–∏–π –∞—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç",
    "–Ø –ë–Ü–õ–¨–®–ï –°–Æ–î–ò –ù–ï –ü–û–í–ï–†–ù–£–°–¨!!!",
    "–ú–µ–Ω—ñ —Å–ø–æ–¥–æ–±–∞–≤—Å—è –í–∞—à –º–∞–≥–∞–∑–∏–Ω",
    "–Ø–∫—ñ—Å—Ç—å –í–æüëç",
    "–ë–æ–∂–µ, —è–∫–µ –∫—á–Ω–µ...üíÖ"]

EMPLOYEES = {
    "andrew": {
        "position": "–ú–µ–Ω–µ–¥–∂–µ—Ä",
        "salary": "30000",
        "start_date": "22.02.2024",
        "name": "–ê–Ω–¥—Ä—ñ–π",
        "password": "1234567a"
    },
    "dima": {
        "position": "–ü—Ä–æ–¥–∞–≤–µ—Ü—å",
        "salary": "14000",
        "start_date": "10.03.2024",
        "name": "–î–º–∏—Ç—Ä–æ",
        "password": "1234567b"
    }
}
LOG = []
MOST_USING_COMMAND = {}


def is_verify_password(password: str) -> bool:
    pass_len = False if len(password) < 8 else True
    pass_digit = False
    pass_char = False

    for char in password:
        if char.isdigit():
            pass_digit = True
        if char.isalpha():
            pass_char = True

    return True if pass_len and pass_digit and pass_char else False


def generate_password(
    len_password: int = 8,
    is_upper: bool = False,
    is_punctuation: bool = False,
    is_repeat: bool = False
) -> str:

    pass_chars = string.ascii_lowercase + string.digits
    pass_chars += string.ascii_uppercase if is_upper else ""
    pass_chars += string.punctuation if is_punctuation else ""
    password = random.choices(pass_chars, k=len_password) if is_repeat else random.sample(pass_chars, k=len_password)
    return "".join(password)


def show_all_prods() -> None:
    template = "|{:^5}|{:<100}|"
    delimiter = "‚Äî" * 108
    head = template.format("‚Ññ", "–ù–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É")
    print(template)
    print(head)
    print(delimiter)
    for i, product in enumerate(PRODUCTS, start=1):
        print(template.format(i, product))

    print(delimiter)
    input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å 'Enter' –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è ")


def add_prod() -> None:
    product = input("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π —Ç–æ–≤–∞—Ä –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ —Å–ø–∏—Å–∫—É: ")

    if product not in PRODUCTS:
        PRODUCTS.append(product)
        input(f"\n–¢–æ–≤–∞—Ä '{product}' –¥–æ–¥–∞–Ω–∏–π –¥–æ —Å–ø–∏—Å–∫—É. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å 'Enter' –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è ")
    else:
        input("\n–¢–∞–∫–∏–π —Ç–æ–≤–∞—Ä –≤–∂–µ —î —É —Å–ø–∏—Å–∫—É. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å 'Enter' –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è ")


def add_prods() -> None:
    prods = input("–í–≤–µ–¥—ñ—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª\n-> ")
    prods = prods.split()
    PRODUCTS.extend(prods)
    input("\n–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤ —Ä–æ–∑—à–∏—Ä–µ–Ω–æ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å 'Enter' –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è ")


def del_prod_by_name() -> None:
    product = input("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä—ñ–≤: ")

    if product in PRODUCTS:
        PRODUCTS.remove(product)
        input(f"\n–¢–æ–≤–∞—Ä '{product}' –≤–∏–¥–∞–ª–µ–Ω–æ –∑—ñ —Å–ø–∏—Å–∫—É. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å 'Enter' –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è ")
    else:
        input("\n–¢–∞–∫–æ–≥–æ —Ç–æ–≤–∞—Ä—É –Ω–µ–º–∞—î —É —Å–ø–∏—Å–∫—É. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å 'Enter' –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è ")


def del_prod_by_numb() -> None:
    index = input("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è: ")

    if index and index.isdigit() and 0 < int(index) <= len(PRODUCTS):
        product = PRODUCTS.pop(int(index) - 1)
        input(f"–¢–æ–≤–∞—Ä '{product}' –≤–∏–¥–∞–ª–µ–Ω–æ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å 'Enter' –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è ")
    else:
        input("–í–∏ –≤–≤–µ–ª–∏ –Ω–µ –≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä—É. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å 'Enter' –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è ")


def show_sorted_prods() -> None:
    print()
    prods = sorted(PRODUCTS)
    for product in prods:
        print(product)

    input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å 'Enter' –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è ")


def sold_prod() -> None:
    product = input("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É –¥–ª—è –ø—Ä–æ–¥–∞–∂—É: ")

    if product in PRODUCTS:
        PRODUCTS.remove(product)
        PRODUCTS_SOLD.append(product)
        input(f"\n–¢–æ–≤–∞—Ä '{product}' –ø—Ä–æ–¥–∞–Ω–æ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å 'Enter' –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è ")
    else:
        input("\n–¢–∞–∫–æ–≥–æ —Ç–æ–≤–∞—Ä—É –Ω–µ–º–∞—î —É —Å–ø–∏—Å–∫—É. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å 'Enter' –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è ")


def find_numb_prod_by_name() -> None:
    product = input("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É –¥–ª—è –ø–æ—à—É–∫—É: ")

    if product in PRODUCTS:
        index = PRODUCTS.index(product)
        input(f"–¢–æ–≤–∞—Ä '{product}' –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –ø—ñ–¥ –Ω–æ–º–µ—Ä–æ–º {index + 1}. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å 'Enter' –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è ")
    else:
        input("\n–¢–∞–∫–æ–≥–æ —Ç–æ–≤–∞—Ä—É –Ω–µ–º–∞—î —É —Å–ø–∏—Å–∫—É. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å 'Enter' –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è ")


def show_sold_prods() -> None:
    if not PRODUCTS_SOLD:
        print("–°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥–∞–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ –ø—É—Å—Ç–∏–π")

    for product in PRODUCTS_SOLD:
        print(product)

    input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å 'Enter' –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è ")


def show_sales_history() -> None:
    prods_sold = PRODUCTS_SOLD[::-1]
    for product in prods_sold:
        print(product)

    input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å 'Enter' –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è ")


def exit():
    LOG.append(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ –ª–æ–≥—ñ–Ω–æ–º '{user_name}' —É–≤—ñ–π—à–æ–≤ —É —Å–∏—Å—Ç–µ–º—É: {datetime.now()}")
    print("–î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è")
    quit()


def add_review() -> None:
    review = input("–ó–∞–ª–∏—à—Ç–µ —Å–≤—ñ–π –≤—ñ–¥–≥—É–∫:\n")
    REVIEWS.append(review)


def find_repeated_chars() -> None:
    reviews = " ".join(REVIEWS)

    repeated_groups = set()
    for i in range(len(reviews)):
        for j in range(i+1, len(reviews)):
            slice = reviews[i:j]
            if reviews.count(slice) >= 2:
                repeated_groups.add(slice)

    input(f"–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø —Å–∏–º–≤–æ–ª—ñ–≤, —è–∫—ñ –ø–æ–≤—Ç–æ—Ä—é—é—Ç—å—Å—è –Ω–µ –º–µ–Ω—à–µ 2 —Ä–∞–∑—ñ–≤:\n{repeated_groups}")


def find_palidrome() -> None:
    palin_prod = []
    for product in PRODUCTS:
        if product.lower() == product[::-1].lower():
            palin_prod.append(product)

    input(f"–í —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä—ñ–≤ —î —Ç–∞–∫—ñ —Å–ª–æ–≤–∞-–ø–∞–ª—ñ–Ω–¥—Ä–æ–º–∏:\n{palin_prod}") if palin_prod else input("–í —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä—ñ–≤ –≤—ñ–¥—Å—É—Ç–Ω—ñ —Å–ª–æ–≤–∞ –ø–∞–ª—ñ–Ω–¥—Ä–æ–º–∏.")


def add_employee() -> None:
    username = input("–í–≤–µ–¥—ñ—Ç—å –ª–æ–≥—ñ–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ")
    name = input("–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞: ")
    position = input("–í–≤–µ–¥—ñ—Ç—å –ø–æ—Å–∞–¥—É –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞: ")
    salary = input("–í–≤–µ–¥—ñ—Ç—å –ó–ü: ")
    start_date = input("–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ '01.01.2024': ")
    password = input("–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å –¥–ª—è –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞: ")

    if username not in EMPLOYEES:
        EMPLOYEES[username] = {
            "position": position,
            "salary": salary,
            "name": name,
            "start_date": start_date,
            "password": password
        }
        input("–ü—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ –≤ —Å–∏—Å—Ç–µ–º—ñ.\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å 'Enter' –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è ")
    else:
        input("–¢–∞–∫–∏–π –ª–æ–≥—ñ–Ω –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π –≤ —Å–∏—Å—Ç–µ–º—ñ.\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å 'Enter' –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è ")


def del_employee() -> None:
    username = input("–í–≤–µ–¥—ñ—Ç—å –ª–æ–≥—ñ–Ω –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è: ")
    if username in EMPLOYEES:
        del EMPLOYEES[username]
        # EMPLOYEES.pop(username)
        input(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –ª–æ–≥—ñ–Ω–æ–º '{username}' —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å 'Enter' –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è ")
    else:
        input("–¢–∞–∫–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ–º–∞—î –≤ —Å–∏—Å—Ç–µ–º—ñ.\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å 'Enter' –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è ")


def show_employees() -> None:
    for username in EMPLOYEES:
        # print(username, EMPLOYEES[username])
        print(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ –ª–æ–≥—ñ–Ω–æ–º '{username}' –º–∞—î —ñ–º'—è {EMPLOYEES[username]['name']} –ø–æ—á–∞–≤ —Å–≤–æ—é —Ä–æ–±–æ—Ç—É '{EMPLOYEES[username]['start_date']}'")
    input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å 'Enter' –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è ")


def change_salary() -> None:
    username = input("–í–≤–µ–¥—ñ—Ç—å –ª–æ–≥—ñ–Ω –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞: ")
    salary = input("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –ó–ü: ")
    if username in EMPLOYEES:
        EMPLOYEES[username]["salary"] = salary
        input(f"–ó–ü –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –ª–æ–≥—ñ–Ω–æ–º '{username}' –∑–º—ñ–Ω–µ–Ω–æ.\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å 'Enter' –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è ")
    else:
        input("–¢–∞–∫–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ–º–∞—î –≤ —Å–∏—Å—Ç–µ–º—ñ.\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å 'Enter' –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è ")


def change_position() -> None:
    username = input("–í–≤–µ–¥—ñ—Ç—å –ª–æ–≥—ñ–Ω –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞: ")
    position = input("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –ø–æ—Å–∞–¥—É: ")
    if username in EMPLOYEES:
        EMPLOYEES[username]["position"] = position
        input(f"–ü–æ—Å–∞–¥—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –ª–æ–≥—ñ–Ω–æ–º '{username}' –∑–º—ñ–Ω–µ–Ω–æ.\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å 'Enter' –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è ")
    else:
        input("–¢–∞–∫–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ–º–∞—î –≤ —Å–∏—Å—Ç–µ–º—ñ.\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å 'Enter' –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è ")


def show_log() -> None:
    pprint(LOG)
    input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å 'Enter' –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è ")


def show_most_using_commands() -> None:
    pprint(MOST_USING_COMMAND)
    input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å 'Enter' –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è ")


def help() -> None:
    print(HELP)

COMMANDS = {
    "show all prods": show_all_prods,
    "add prod": add_prod,
    "add prods": add_prods,
    "del prod by name": del_prod_by_name,
    "del prod by numb": del_prod_by_numb,
    "show sorted prods": show_sorted_prods,
    "sold prod": sold_prod,
    "find numb prod by name": find_numb_prod_by_name,
    "show sold prods": show_sold_prods,
    "show sales history": show_sales_history,
    "exit": exit,
    "add review": add_review,
    "find repeated chars": find_repeated_chars,
    "find palidrome": find_palidrome,
    "add employee": add_employee,
    "del employee": del_employee,
    "show employees": show_employees,
    "change salary": change_salary,
    "change position": change_position,
    "show log": show_log,
    "show most using commands": show_most_using_commands,
    "help": help
}


if __name__ == "__main__":
    user_name = input("–í–≤–µ–¥—ñ—Ç—å —Å–≤—ñ–π –ª–æ–≥—ñ–Ω: ")
    if user_name in EMPLOYEES:
        PASSWORD = EMPLOYEES[user_name]["password"]

    else:
        position = input("–í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—é –ø–æ—Å–∞–¥—É: ")
        salary = input("–í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—é –ó–ü: ")
        name = input("–í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î —ñ–º'—è: ")
        EMPLOYEES[user_name] = {
            "position": position,
            "salary": salary,
            "name": name,
            "start_date": datetime.now().strftime("%d.%m.%Y")
        }

    while not PASSWORD:
        command = input("–í–≤–µ–¥—ñ—Ç—å 'create' –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è —Å–≤–æ–≥–æ –ø–∞—Ä–æ–ª—é;\n–í–≤–µ–¥—ñ—Ç—å 'generate' –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—ó –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø–∞—Ä–æ–ª—é.\n–ê–±–æ –±—É–¥—å —è–∫–∏–π —Å–∏–º–≤–æ–ª –¥–ª—è –≤–∏—Ö–æ–¥—É –∑ –ø—Ä–æ–≥—Ä–∞–º–∏\n-> ")
        if command == "create":
            password = input("–í–≤–µ–¥—ñ—Ç—å —Å–≤—ñ–π –ø–∞—Ä–æ–ª—å (–ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –Ω–µ –º–µ–Ω—à–µ 8 —Å–∏–º–≤–æ–ª—ñ–≤, –∞ —Ç–∞–∫–æ–∂ –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ —Ö–æ—á–∞ –± –æ–¥–Ω—É –±—É–∫–≤—É —Ç–∞ –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É): ")

            if is_verify_password(password):
                PASSWORD = password
                EMPLOYEES[user_name]["password"] = PASSWORD
            else:
                print("–ü–∞—Ä–æ–ª—å –Ω–µ –ø—Ä–æ–π—à–æ–≤ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É, –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –ø–∞—Ä–æ–ª—å –∞–±–æ –∑–≥–µ–Ω–µ—Ä—É–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –ø–∞—Ä–æ–ª—å")

        elif command == "generate":
            len_pass = input("–í–≤–µ–¥—ñ—Ç—å –¥–æ–≤–∂–∏–Ω—É –ø–∞—Ä–æ–ª—è (–Ω–µ –º–µ–Ω—à–µ 8) –∞–±–æ –∑–∞–ª–∏—à–∏—Ç–∏ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º (8 —Å–∏–º–≤–æ–ª—ñ–≤): ")
            if len_pass.isdigit() and int(len_pass) > 8:
                len_pass = int(len_pass)
            else:
                len_pass = 8

            is_upper = True if input("–ß–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –≤–µ–ª–∏–∫—ñ –±—É–∫–≤–∏ (1 - —Ç–∞–∫, –±—É–¥—å —è–∫–∏–π —ñ–Ω—à–∏–π —Å–∏–º–≤–æ–ª - –Ω—ñ)? ") == "1" else False
            is_punctuation = True if input("–ß–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–∏ (1 - —Ç–∞–∫, –±—É–¥—å —è–∫–∏–π —ñ–Ω—à–∏–π —Å–∏–º–≤–æ–ª - –Ω—ñ)? ") == "1" else False
            is_repeat = True if input("–ß–∏ –º–æ–∂—É—Ç—å —Å–∏–º–≤–æ–ª–∏ –ø–æ–≤—Ç–æ—Ä—é–≤–∞—Ç–∏—Å—å (1 - –¢–∞–∫, –±—É–¥—å —è–∫–∏–π —ñ–Ω—à–∏–π —Å–∏–º–≤–æ–ª - –ù—ñ)? ") == "1" else False
            password = ""
            while not is_verify_password(password):
                password = generate_password(len_password=len_pass, is_punctuation=is_punctuation, is_upper=is_upper, is_repeat=is_repeat)

            PASSWORD = password
            EMPLOYEES[user_name]["password"] = PASSWORD
    else:
        print(f"\n–í–∞—à –ø–∞—Ä–æ–ª—å '{PASSWORD}' —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ. –ó–∞–ø–∞–º'—è—Ç–∞–π—Ç–µ –π–æ–≥–æ –¥–ª—è –≤—Ö–æ–¥—É –≤ —Å–∏—Å—Ç–µ–º—É.\n")

    pass_word = input("–í–≤–µ–¥—ñ—Ç—å —Å–≤—ñ–π –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥—É –≤ —Å–∏—Å—Ç–µ–º—É: ")

    command = None
    while pass_word == PASSWORD:
        if not command:
            LOG.append(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ –ª–æ–≥—ñ–Ω–æ–º '{user_name}' —É–≤—ñ–π—à–æ–≤ —É —Å–∏—Å—Ç–µ–º—É: {datetime.now()}")
            print("–î–æ–±—Ä–æ–≥–æ –¥–Ω—è. –í—ñ—Ç–∞—î–º–æ –≤ –Ω–∞—à—ñ–π —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω—ñ–π —Å–∏—Å—Ç–µ–º—ñ")

        command = input("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–æ–º–∞–Ω–¥–∏ ('help' –¥–ª—è –¥–æ–≤—ñ–¥–∫–∏): ")
        LOG.append(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ –ª–æ–≥—ñ–Ω–æ–º '{user_name}' –≤–≤—ñ–≤ –∫–æ–º–∞–Ω–¥—É {command}: {datetime.now()}")

        if command in MOST_USING_COMMAND:
            MOST_USING_COMMAND[command] += 1
        else:
            MOST_USING_COMMAND[command] = 1

        if command in COMMANDS:
            command = COMMANDS[command]
            command()
        else:
            print("–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑")

    else:
        print("–ü–∞—Ä–æ–ª—å –Ω–µ–≤—ñ—Ä–Ω–∏–π, –¥–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ")

