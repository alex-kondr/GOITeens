# Приклад 1
# Припустимо, що ви розробляєте програму, яка потребує
# введення числових значень. Якщо користувач помилково
# вводить текст замість числа, виникає виняток ValueError.
# Обробимо цю ситуацію, щоб програма не завершилася з помилкою.

# try:
#     number = int(input("Введіть ціле число: "))
#     print("Ви ввели число:", number)
# except ValueError:
#     print("Помилка: введено неправильний тип даних! Потрібно ввести ціле число.")



# Приклад 2
# Розглянемо ситуацію, коли вам потрібно відкрити
# файл для читання. Якщо файл не існує, Python викличе
# виняток FileNotFoundError. Використаємо try-except,
# щоб обробити цю ситуацію.

# try:
#     file = open("goiteens.txt", "r")
#     content = file.read()
#     print(content)
#     file.close()
# except FileNotFoundError:
#     print("Помилка: файл не знайдено!")





# Приклад 3
# Іноді одна частина коду може викликати кілька
# різних винятків. Ви можете обробляти їх окремо,
# використовуючи кілька блоків except. Це дозволяє
# вам надавати різні повідомлення або виконувати різні
# дії залежно від типу помилки.(розглянемо це більш детально далі)

# try:
#     value = int(input("Введіть ціле число: "))
#     result = 10 / value
#     print("Результат:", result)
# except ValueError:
#     print("Помилка: введено неправильний тип даних! Потрібно ввести ціле число.")
# except ZeroDivisionError:
#     print("Помилка: ділення на нуль неможливе!")



# Розглянемо інший приклад, розробник 1
# розробляє програму, яка відкриває файл,
# читає з нього дані та ділить одне число з
# файлу на інше. Тут можуть виникати різні
# помилки, наприклад, файл може не існувати,
# або може бути спроба ділення на нуль.





# Інший поширений сценарій виникнення різних
# помилок - робота зі списками. Якщо ви намагаєтеся
# отримати доступ до елементу за індексом,
# який виходить за межі списку, виникає помилка
# IndexError. Крім того, можуть виникати інші
# винятки, які потрібно обробити окремо.


# ValueError виникає, коли функція отримує правильний
# тип аргументу, але аргумент має недопустиме значення.
# Наприклад, при спробі перетворити рядок, який не містить
# чисел, на ціле число виникне ValueError.


# TypeError виникає, коли операція або
# функція застосовується до об'єкта неприпустимого
# типу. Наприклад, спроба скласти число і рядок
# викликає TypeError.


# IndexError виникає, коли намагаються
# отримати доступ до елемента списку за
# індексом, що виходить за межі списку.


# KeyError виникає, коли спроба отримати доступ
# до ключа у словнику, якого немає в цьому словнику.
# Це може статися, коли розробник 1 передбачає
# наявність ключа, але забуває перевірити його наявність перед доступом.


# ZeroDivisionError виникає, коли є спроба ділення на нуль.


# finally
# обов'язкове закриття файлу





# Підняття винятків (raise)






# Завдання 1
# Розробіть функцію, яка намагається відкрити
# файл для читання. Якщо файл не існує, підніміть
# виняток FileNotFoundError і обробіть його, вивівши
# повідомлення про помилку. Якщо файл існує,
# прочитайте його вміст і виведіть на екран.
# Незалежно від того, чи виникла помилка,
# переконайтеся, що файл буде закритий.



# Завдання 2
# Розробіть функцію, яка приймає два числа як
# аргументи та виконує їх ділення. Якщо друге
# число дорівнює нулю, підніміть виняток ZeroDivisionError
# і обробіть його, вивівши повідомлення про помилку.
# Якщо один із аргументів не є числом, підніміть виняток
# TypeError і також обробіть його.





# Завдання за бажанням 3(додаткове)
# Розробіть функцію, яка перевіряє пароль на
# відповідність певним критеріям. Якщо пароль
# не відповідає вимогам (наприклад, менше 8 символів,
# немає цифр), підніміть відповідний виняток.
# Обробіть кожен тип помилки окремо, щоб повідомити
# користувача про конкретну проблему.

